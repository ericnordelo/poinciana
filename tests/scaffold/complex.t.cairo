/// Generated by poinciana using BTT

#[test]
fn test_panic_when_delegate_called() {
    // it should revert

    panic!("NOT IMPLEMENTED");
}

fn when_not_delegate_called() {// code
}

#[test]
fn test_panic_given_the_id_references_a_null_stream() {
    when_not_delegate_called();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

fn given_the_id_does_not_reference_a_null_stream() {// code
}

fn given_the_stream_is_cold() {// code
}

#[test]
fn test_panic_given_the_streams_status_is_depleted() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_cold();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

#[test]
fn test_panic_given_the_streams_status_is_canceled() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_cold();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

#[test]
fn test_panic_given_the_streams_status_is_settled() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_cold();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

fn given_the_stream_is_warm() {// code
}

fn when_the_caller_is_unauthorized() {// code
}

#[test]
fn test_panic_when_the_caller_is_a_malicious_third_party() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_unauthorized();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

#[test]
fn test_panic_when_the_caller_is_an_approved_third_party() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_unauthorized();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

#[test]
fn test_panic_when_the_caller_is_a_former_recipient() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_unauthorized();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

fn when_the_caller_is_authorized() {// code
}

#[test]
fn test_panic_given_the_stream_is_not_cancelable() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();

    // it should revert

    panic!("NOT IMPLEMENTED");
}

fn given_the_stream_is_cancelable() {// code
}

#[test]
fn test_given_the_streams_status_is_pending() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();

    // it should cancel the stream
    // it should mark the stream as depleted
    // it should make the stream not cancelable

    panic!("NOT IMPLEMENTED");
}

fn given_the_streams_status_is_streaming() {// code
}

fn when_the_caller_is_the_sender() {// code
}

#[test]
fn test_given_the_recipient_is_not_a_contract() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_sender();

    // it should cancel the stream
    // it should mark the stream as canceled

    panic!("NOT IMPLEMENTED");
}

fn given_the_recipient_is_a_contract() {// code
}

#[test]
fn test_given_the_recipient_does_not_implement_the_hook() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_sender();
    given_the_recipient_is_a_contract();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should call the recipient hook
    // it should ignore the revert

    panic!("NOT IMPLEMENTED");
}

fn given_the_recipient_implements_the_hook() {// code
}

#[test]
fn test_when_the_recipient_reverts() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_sender();
    given_the_recipient_is_a_contract();
    given_the_recipient_implements_the_hook();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should call the recipient hook
    // it should ignore the revert

    panic!("NOT IMPLEMENTED");
}

fn when_the_recipient_does_not_revert() {// code
}

#[test]
fn test_when_there_is_reentrancy_1() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_sender();
    given_the_recipient_is_a_contract();
    given_the_recipient_implements_the_hook();
    when_the_recipient_does_not_revert();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should call the recipient hook
    // it should ignore the revert

    panic!("NOT IMPLEMENTED");
}

#[test]
fn test_when_there_is_no_reentrancy_1() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_sender();
    given_the_recipient_is_a_contract();
    given_the_recipient_implements_the_hook();
    when_the_recipient_does_not_revert();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should make the stream not cancelable
    // it should update the refunded amount
    // it should refund the sender
    // it should call the recipient hook
    // it should emit a {CancelLockupStream} event
    // it should emit a {MetadataUpdate} event

    panic!("NOT IMPLEMENTED");
}

fn when_the_caller_is_the_recipient() {// code
}

#[test]
fn test_given_the_sender_is_not_a_contract() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_recipient();

    // it should cancel the stream
    // it should mark the stream as canceled

    panic!("NOT IMPLEMENTED");
}

fn given_the_sender_is_a_contract() {// code
}

#[test]
fn test_given_the_sender_does_not_implement_the_hook() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_recipient();
    given_the_sender_is_a_contract();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should call the sender hook
    // it should ignore the revert

    panic!("NOT IMPLEMENTED");
}

fn given_the_sender_implements_the_hook() {// code
}

#[test]
fn test_when_the_sender_reverts() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_recipient();
    given_the_sender_is_a_contract();
    given_the_sender_implements_the_hook();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should call the sender hook
    // it should ignore the revert

    panic!("NOT IMPLEMENTED");
}

fn when_the_sender_does_not_revert() {// code
}

#[test]
fn test_when_there_is_reentrancy_2() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_recipient();
    given_the_sender_is_a_contract();
    given_the_sender_implements_the_hook();
    when_the_sender_does_not_revert();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should call the sender hook
    // it should ignore the revert

    panic!("NOT IMPLEMENTED");
}

#[test]
fn test_when_there_is_no_reentrancy_2() {
    when_not_delegate_called();
    given_the_id_does_not_reference_a_null_stream();
    given_the_stream_is_warm();
    when_the_caller_is_authorized();
    given_the_stream_is_cancelable();
    given_the_streams_status_is_streaming();
    when_the_caller_is_the_recipient();
    given_the_sender_is_a_contract();
    given_the_sender_implements_the_hook();
    when_the_sender_does_not_revert();

    // it should cancel the stream
    // it should mark the stream as canceled
    // it should make the stream not cancelable
    // it should update the refunded amount
    // it should refund the sender
    // it should call the sender hook
    // it should emit a {MetadataUpdate} event
    // it should emit a {CancelLockupStream} event

    panic!("NOT IMPLEMENTED");
}

